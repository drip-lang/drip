PI :: 3.14159265358979323846
TAU :: PI * 2

main :: () {
    variables()
    functions()
    functions_advanced()
    control_flow()
    structs()
    traits()
    iterators()
}

variables :: () {
    hello := "hello"
    world :: "world"
    // hello: String := "Hello" mutable types can also be written
    // world: String :: "World" constant types can also be written

    hello = hello + " " + world
    // world = hello + world // will error due to world being a constant

    println(hello) // "hello world"

    // arrays
    arr :: [4, 5, 6]
    // arr: [3]i32 :: [4, 5, 6]

    // n-dim arrays
    // arr: [3][3][3]i32
    arr :: [[
            [1, 3, 4]
            [3, 4, 5]
            [3, 8, 0]
        ][
            [2, 3, 4]
            [0, 8, 2]
            [5, 9, 3]
        ][
            [4, 8, 6]
            [2, 8, 3]
            [1, 0, 0]
        ]]
}

functions :: () {
    mul_add :: (a, b, c: i32) -> i32 {
        a + b * c
    }

    a, b, c :: 10, 3, 5
    res := mul_add(a, b, c)
    res /= 2
    println("({a} + {b} * {c}) / 2 = {res}" // (10 + 3 * 5) / 2 = 12
}


functions_advanced :: () {
    identity :: (f: Fn()) {
        f
    }

    add_and_sub :: (a, b: i32) -> (i32, i32) { (a + b, a - b) }

    x :: 10
    y :: 5

    addition, subtraction :: identity(add_and_sub)(x, y)

    println("{addition}, {subtraction}") // 15, 5
}

control_flow :: () {
    x :: PI
    y :: TAU

    // if
    if x == y {
        ...
    } else x == y * 2 {
        ...
    } else {
        ...
    }

    z :: x >= y ? x : y

    z :: if x >= y { x } else { y }

    // match
    match x {
        PI => {..}  // x == PI
        PI, TAU => { ... } // x == PI || x == TAU
        PI..TAU => { ... } // PI <= x && x < TAU
        PI..TAU + 1 => { ... } // PI <= x && x <= TAU
        _ => { .. } // no matches
    }

    // for loop
    arr :: [3, 8, 0]

    // x := value
    // i := index
    for x in arr { ... }
    for x, i in arr { ... }

    // also works with tuples, although they require Round Brackets
    arr :: [(4, 3), (0, 2), (8, 4)]

    for (x, y) in arr { ... }
    for (x, y), i in arr { ... }

    for i in 4..8 { } // works with ranges

    // also has "index" for ranges. might be useful for custom steps
    for i, idx in 4..8=2 { }

    for _ in 0..8 { } // value can be ignored

    loop { } // infinite loop, can be breaked

    while x > 5 { } // while loop

    // for, while and loop can contain:
    // break <optional return value>
    // continue

    x :: for i in 0..8 {
        if i == 5 {
            break i
        }
    }

    println("{x}") // 5
}

Vec3 :: struct {
    x, y, z: i32
}

Vec3 :: impl {
    new :: fn(x, y, z: i32) -> Self {
        Self { x, y, z }
    }

    plus_one :: fn(self) {
        x, y, z += 1
    }
}

structs :: () {
    vec1 :: Vec3 { 5, 8, 7 }
    vec2 :: Vec3 { y: 8, z: 7, x: 5 }
    vec3 :: Vec3::new(5, 8, 7)
    vec4 := Vec3::new(y: 8, z: 7, x: 5)

    vec4.plus_one() // x: 6, y: 9, z: 8
}

Sound :: trait {
    make_sound :: ()
}

Animal :: struct {
    name: string
    health: i32
    sound: Fn()
}

Animal <| Sound :: impl {
    make_sound :: () {
        self.sound()
    }
}

// Dog automatically has Fields and Traits of Animal
Dog :: struct <| Animal {
    favorite_toy: string
}

Cat :: struct <| Animal { }

// automatically inherited traits can be overriden
Cat <| Sound :: impl {
    make_sound :: () {
        println("meow")
    }
}

iterators :: () {

}